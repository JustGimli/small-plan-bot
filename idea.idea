1. ИИ-ассистент в телеграм бота
2. Интеграция платежной системы на подписке. Первые три сообщения для пользователя будут бесплатные, дальше уже пользователь должен оплатить доступ на месяц
3. Интеграция миджорни через userapi. Должно запускаться через команду /image и доступно только тем, кто оплатил подписку

Пропиши также состав базы данных sqlite для платежной системы



    # if message.photo:
    #     photo = await message.photo[-1].get_file()
    #     image_file = io.BytesIO()
    #     await photo.download(destination_file=image_file)
    #     image_file.seek(0)
    
    # if text and image_file:
    #     # Обработка комбинации текста и изображения
    #     await openai_helper.add_message(user_id, "user", text)
    #     response_url = await openai_helper.interpret_image(image_file, text)
    #     await message.reply(f"Image interpretation based on the text '{text}': {response_url}")
    if text:
        # Обработка только текста
        await openai_helper.add_message(user_id, "user", text)
        response = await openai_helper.prompts(user_id, text)
        await message.reply(response)
    # elif image_file:
    #     # Обработка только изображения
    #     prompt = "Please describe the content of this image.я"
    #     response_url = await openai_helper.interpret_image(image_file, prompt)
    #     await message.reply(f"Image interpretation: {response_url}")



# @dp.callback_query_handler(Text(startswith=config.img_gen_settings))
# async def generate_command(callback_query: types.CallbackQuery):
#     await callback_query.message.answer(config.select_gender_text, reply_markup=kb.gender_kb())
#     await GenerateState.waiting_for_gender.set()


# @dp.callback_query_handler(Text(startswith="gender_"), state=GenerateState.waiting_for_gender)
# async def handle_gender_selection(callback_query: types.CallbackQuery, state: FSMContext):
#     gender = callback_query.data.split("_")[1]
#     await state.update_data(gender=gender)
#     await callback_query.message.answer(config.select_style_text, reply_markup=kb.style_kb(gender))
#     await GenerateState.waiting_for_style.set()

# @dp.callback_query_handler(Text(startswith="style_"), state=GenerateState.waiting_for_style)
# async def handle_style_selection(callback_query: types.CallbackQuery, state: FSMContext):
#     style_name = callback_query.data.split("_")[1]
#     await state.update_data(style_name=style_name)
#     await callback_query.message.answer(config.enter_prompt_text)
#     await GenerateState.waiting_for_prompt.set()
